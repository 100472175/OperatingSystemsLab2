 // Esto funciona para 1 solo pipe
 // Check if the command is empty
        if (command_counter > 0) {
            // Check if too many commands
            if (command_counter > MAX_COMMANDS) {
                printf("Error: Maximum number of commands is %d \n", MAX_COMMANDS);
            } else {

                int num_pipes = command_counter - 1;
                int pipe_fds[num_pipes][2];
                pid_t pids[num_pipes + 1];


                // Create the necessary pipes to execute all commands
                for (int i = 0; i < num_pipes; i++) {
                    if (pipe(pipe_fds[i]) < 0) {
                        perror("pipe");
                        exit(EXIT_FAILURE);
                    }
                }

                // Execute commands in order
                for (int i = 0; i < command_counter; i++) {
                    pids[i] = fork();
                    if (pids[i] == -1) {
                        perror("fork");
                        exit(EXIT_FAILURE);
                    }
                    if (pids[i] == 0) { // Child process
                        // Redirect stdin from previous pipe if aplicable
                        if (i > 0) {
                            close(pipe_fds[i - 1][1]);
                            dup2(pipe_fds[i - 1][0],
                                 STDIN_FILENO); // redirect stdin to the read end of the previous pipe
                        } else {
                        }
                        if (i < num_pipes) {
                            close(pipe_fds[i][0]); // close unused read end of the current pipe
                            dup2(pipe_fds[i][1], STDOUT_FILENO); // redirect stdout to the write end of the current pipe
                        }
                        getCompleteCommand(argvv, i);
                        execvp(argv_execvp[0], argv_execvp);
                        perror("execvp");
                        exit(EXIT_FAILURE);
                    }
                }
                // Close all pipes in parent process
                for (int i = 0; i < num_pipes; i++) {
                    close(pipe_fds[i][0]);
                    close(pipe_fds[i][1]);
                }

                waitpid(pids[num_pipes], NULL, 0);

            }
        }
    }
    exit(EXIT_SUCCESS);
}
